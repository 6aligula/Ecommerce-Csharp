// <auto-generated />
using System;
using E_Commerce_App.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_Commerce_App.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210325175609_third")]
    partial class third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 9, 0, DateTimeKind.Local).AddTicks(4977),
                            IsActive = false,
                            Name = "Telefon"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 9, 0, DateTimeKind.Local).AddTicks(6174),
                            IsActive = false,
                            Name = "Bilgisayar"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 9, 0, DateTimeKind.Local).AddTicks(6202),
                            IsActive = false,
                            Name = "Tv, Ev Elektroniği"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 9, 0, DateTimeKind.Local).AddTicks(6205),
                            IsActive = false,
                            Name = "Bilgisayar Parçaları"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 9, 0, DateTimeKind.Local).AddTicks(6207),
                            IsActive = false,
                            Name = "Foto, Kamera"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 9, 0, DateTimeKind.Local).AddTicks(6212),
                            IsActive = false,
                            Name = "Aksesuar"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 9, 0, DateTimeKind.Local).AddTicks(6214),
                            IsActive = false,
                            Name = "Oyun, Hobi"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 9, 0, DateTimeKind.Local).AddTicks(6216),
                            IsActive = false,
                            Name = "Ev, Mutfak"
                        });
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "#f9f6ef",
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 995, DateTimeKind.Local).AddTicks(7880),
                            IsActive = false,
                            Name = "Beyaz"
                        },
                        new
                        {
                            Id = 2,
                            Code = "#202020",
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 997, DateTimeKind.Local).AddTicks(479),
                            IsActive = false,
                            Name = "Siyah"
                        },
                        new
                        {
                            Id = 3,
                            Code = "#ba0c2f",
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 997, DateTimeKind.Local).AddTicks(529),
                            IsActive = false,
                            Name = "Kırmızı"
                        },
                        new
                        {
                            Id = 4,
                            Code = "#FECB2E",
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 997, DateTimeKind.Local).AddTicks(533),
                            IsActive = false,
                            Name = "Sarı"
                        },
                        new
                        {
                            Id = 5,
                            Code = "#147EFB",
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 997, DateTimeKind.Local).AddTicks(535),
                            IsActive = false,
                            Name = "Mavi"
                        },
                        new
                        {
                            Id = 6,
                            Code = "#53D769",
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 997, DateTimeKind.Local).AddTicks(541),
                            IsActive = false,
                            Name = "Yeşil"
                        });
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHome")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 999, DateTimeKind.Local).AddTicks(5301),
                            Description = "aciklama 1",
                            IsActive = false,
                            IsHome = true,
                            MainImage = "none",
                            Name = "Ürün 1",
                            Price = 11.0,
                            Url = "product1"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 999, DateTimeKind.Local).AddTicks(9138),
                            Description = "aciklama 2",
                            IsActive = false,
                            IsHome = true,
                            MainImage = "none",
                            Name = "Ürün 2",
                            Price = 12.0,
                            Url = "product2"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 999, DateTimeKind.Local).AddTicks(9351),
                            Description = "aciklama 3",
                            IsActive = false,
                            IsHome = true,
                            MainImage = "none",
                            Name = "Ürün 3",
                            Price = 13.0,
                            Url = "product3"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 999, DateTimeKind.Local).AddTicks(9357),
                            Description = "aciklama 4",
                            IsActive = false,
                            IsHome = true,
                            MainImage = "none",
                            Name = "Ürün 4",
                            Price = 14.0,
                            Url = "product4"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 999, DateTimeKind.Local).AddTicks(9361),
                            Description = "aciklama 5",
                            IsActive = false,
                            IsHome = true,
                            MainImage = "none",
                            Name = "Ürün 5",
                            Price = 15.0,
                            Url = "product5"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2021, 3, 25, 20, 56, 8, 999, DateTimeKind.Local).AddTicks(9370),
                            Description = "aciklama 6",
                            IsActive = false,
                            IsHome = true,
                            MainImage = "none",
                            Name = "Ürün 6",
                            Price = 16.0,
                            Url = "product6"
                        });
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.CartItem", b =>
                {
                    b.HasOne("E_Commerce_App.Core.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("E_Commerce_App.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Color", b =>
                {
                    b.HasOne("E_Commerce_App.Core.Entities.Product", null)
                        .WithMany("Colors")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Image", b =>
                {
                    b.HasOne("E_Commerce_App.Core.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("E_Commerce_App.Core.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_App.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.ProductCategory", b =>
                {
                    b.HasOne("E_Commerce_App.Core.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_App.Core.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("E_Commerce_App.Core.Entities.Product", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Images");

                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
